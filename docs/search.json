[
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Pandas",
    "section": "",
    "text": "안녕하세요!"
  },
  {
    "objectID": "posts/intro/index.html",
    "href": "posts/intro/index.html",
    "title": "LS_school",
    "section": "",
    "text": "복습용 블로그"
  },
  {
    "objectID": "posts/intro/index.html#월-22일-복습",
    "href": "posts/intro/index.html#월-22일-복습",
    "title": "LS_school",
    "section": "7월 22일 복습",
    "text": "7월 22일 복습\n-날짜, 문자 다루기 연습\n\nimport pandas as pd\n\ndf = pd.read_csv('./data/bike_data.csv')\nprint(df.head())\ndf['datetime'] =pd.to_datetime(df['datetime'])\n\n#1번\ndf['hour'] = df['datetime'].dt.hour\n\ndf['hour']\ndf['date'] = df['datetime'].dt.date\nour = df.loc[df['season'] == 1]\n\nour.groupby('hour')['count'].mean().reset_index()\n\n#2\ndf.groupby('season')['count'].mean().reset_index()\n\n\n#3\ndf['month'] = df['datetime'].dt.month\n\ndf.groupby('month')['count'].sum().reset_index()\n\n\n#4\ndf['date'] = df['datetime'].dt.date\nres4 = df.groupby('date')['count'].sum().reset_index()\ndat = res4.loc[res4['count'].idxmax()][0]\ncoun = res4.loc[res4['count'].idxmax()][1]\nf'날짜는 {dat}, 카운트는 {coun}'\n\n#5\ndf.groupby('hour')['count'].mean().reset_index()\n\n#6 특정 요일(weekday) 동안의 총 대여량(count)을 구하시오.\ndf\ndf['week'] = df['datetime'].dt.day_name()\ndfs = df.groupby('week')['count'].sum().reset_index()\nf'{dfs.iloc[1,0]}의 총 대여량은 {dfs.iloc[1,1]} 입니다'\n\n#7\n#주어진 Bike Sharing 데이터를 사용하여 넓은 형식(wide format)에서 긴 형식(long format)으로 변환하시오. \n# casual과 registered 열을 하나의 열로 변환하고, 각 기록의 대여 유형과 대여 수를 포함하는 긴 형식 데이터프레임을 만드시오.\ndf['casual']\ndf7 = df.loc[:, ['datetime', 'season', 'casual', 'registered']]\n\ndf7\ndf8 = pd.melt(df7, \n        id_vars = ['datetime', 'season'],\n        var_name = 'user_type',\n        value_vars= ['casual', 'registered'],\n        value_name= 'user_count')\n\n#8\n#이전에 생성한 긴 형식 데이터프레임을 활용하여 \n# 각 계절(season)별로 casual과 registered 사용자의 평균 대여 수(count)를 구하시오.\n\ndf8.groupby(['season', 'user_type'])['user_count'].mean().reset_index()\n\n              datetime  season  holiday  workingday  weather   temp   atemp  \\\n0  2011-09-05 17:00:00       3        1           0        2  27.06  29.545   \n1  2011-05-17 11:00:00       2        0           1        2  22.96  26.515   \n2  2011-11-10 09:00:00       4        0           1        2  17.22  21.210   \n3  2011-10-13 07:00:00       4        0           1        3  22.14  25.760   \n4  2011-10-15 14:00:00       4        0           0        1  24.60  31.060   \n\n   humidity  windspeed  casual  registered  count  \n0        89     7.0015      37          77    114  \n1        83    27.9993      26         104    130  \n2        94     7.0015      23         188    211  \n3       100     8.9981       5          76     81  \n4        33    31.0009     242         230    472  \n\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_32052\\4211086517.py:29: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n  dat = res4.loc[res4['count'].idxmax()][0]\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_32052\\4211086517.py:30: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n  coun = res4.loc[res4['count'].idxmax()][1]\n\n\n\n\n\n\n\n\n\nseason\nuser_type\nuser_count\n\n\n\n\n0\n1\ncasual\n14.122642\n\n\n1\n1\nregistered\n89.047170\n\n\n2\n2\ncasual\n48.990196\n\n\n3\n2\nregistered\n169.813725\n\n\n4\n3\ncasual\n55.127273\n\n\n5\n3\nregistered\n210.372727\n\n\n6\n4\ncasual\n29.709402\n\n\n7\n4\nregistered\n188.871795\n\n\n\n\n\n\n\n\nimport pandas as pd\n#9\npd.set_option('display.max_columns', None) # 전체 칼럼 정보 프린트 옵션\ndf = pd.read_csv('./data/logdata.csv')\nprint(df.head(2))\n\ndf8 = df['로그'].str.extractall(r'([0-9]+)').reset_index()\ndf8\ndf['숫자'] = df8.groupby('level_0')[0].apply(lambda x: ' '.join(x))\n\n\ndf\n#10\ndf['시간'] = df['로그'].str.extract(r'(\\s[0-9:]+)')\n\n#11\ndf['로그']\ndf['한글'] = df['로그'].str.extract(r'(\\s[가-힣]+)')\ndf['한글']\n\n#12 특수문자 제거\ndf['특수문자 제거'] = df['로그'].str.replace(r'[^a-zA-Z0-9가-힣\\s]', '', regex=True)\ndf['특수문자 제거']\n\n#로그 칼럼에서 유저, \n# Amount 값을 추출한 후 각 유저별 Amount의 평균값을 계산하시오.\n\ndf['user'] = df['로그'].str.extract(r'(\\s[가-힣]+)')\ndf10 = df['로그'].str.extract(r'(\\s[가-힣]+)').reset_index()\ndf['로그'].str.extract(r'Amount:\\s(\\d+)')\n#찾고 싶은거에만 괄호 치면 됨.\ndf10\n\ndf\ndf['로그'][27]\ndf9 = df['로그'].str.extract(r'(\\s\\d{4})').reset_index()\ndf9\ndf11 = pd.merge(df10, df9,\n                on= 'index', \n                how = 'left')\ndf11 = df11.dropna()\ndf11['0_y'] = pd.to_numeric(df11['0_y'], errors='coerce')\ndf12 = df11.groupby('0_x')['0_y'].mean().reset_index()\ndf12 = df12.rename(columns = {'0_x': 'user', '0_y':'amount'})\ndf12\n\n                                                  로그\n0  2024-07-18 12:34:56 User: 홍길동 Action: Login ID...\n1  2024-07-18 12:35:00 User: 김철수 Action: Purchase...\n\n\n\n\n\n\n\n\n\nuser\namount\n\n\n\n\n0\n김철수\n3666.666667\n\n\n1\n박지성\n5750.000000\n\n\n2\n이영희\n4250.000000\n\n\n3\n장보고\n5750.000000\n\n\n4\n최강타\n3750.000000\n\n\n5\n홍길동\n4250.000000"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Kim Sun Jun",
    "section": "",
    "text": "선준 블로그"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "SunJun blog",
    "section": "",
    "text": "Order By\n      Default\n      \n        Title\n      \n      \n        Date - Oldest\n      \n      \n        Date - Newest\n      \n      \n        Author\n      \n    \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nLS_school\n\n\n\nnews\n\ncode\n\nanalysis\n\n\n\n\n\n\n\n\n\nJul 22, 2025\n\n\nKim Sun Jun\n\n\n\n\n\n\n\n\n\n\n\n\nPost With Code\n\n\n\nnews\n\ncode\n\nanalysis\n\n\n\n\n\n\n\n\n\nJul 22, 2025\n\n\nHarlow Malloc\n\n\n\n\n\n\n\n\n\n\n\n\nPandas\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nJul 22, 2025\n\n\nKim Sun Jun\n\n\n\n\n\nNo matching items"
  }
]