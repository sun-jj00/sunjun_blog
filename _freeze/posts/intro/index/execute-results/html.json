{
  "hash": "90e2f53ced7482dd10c841d547a503f9",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"LS_school\"\nauthor: \"Kim Sun Jun\"\ndate: \"2025-07-22\"\njupyter: \n  kernel: ls_gen_5\ncategories: [news, code, analysis]\n---\n\n\n복습용 블로그\n\n## 7월 22일 복습\n\n-날짜, 문자 다루기 연습\n\n::: {#f622d7e7 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\n\ndf = pd.read_csv('./data/bike_data.csv')\nprint(df.head())\ndf['datetime'] =pd.to_datetime(df['datetime'])\n\n#1번\ndf['hour'] = df['datetime'].dt.hour\n\ndf['hour']\ndf['date'] = df['datetime'].dt.date\nour = df.loc[df['season'] == 1]\n\nour.groupby('hour')['count'].mean().reset_index()\n\n#2\ndf.groupby('season')['count'].mean().reset_index()\n\n\n#3\ndf['month'] = df['datetime'].dt.month\n\ndf.groupby('month')['count'].sum().reset_index()\n\n\n#4\ndf['date'] = df['datetime'].dt.date\nres4 = df.groupby('date')['count'].sum().reset_index()\ndat = res4.loc[res4['count'].idxmax()][0]\ncoun = res4.loc[res4['count'].idxmax()][1]\nf'날짜는 {dat}, 카운트는 {coun}'\n\n#5\ndf.groupby('hour')['count'].mean().reset_index()\n\n#6 특정 요일(weekday) 동안의 총 대여량(count)을 구하시오.\ndf\ndf['week'] = df['datetime'].dt.day_name()\ndfs = df.groupby('week')['count'].sum().reset_index()\nf'{dfs.iloc[1,0]}의 총 대여량은 {dfs.iloc[1,1]} 입니다'\n\n#7\n#주어진 Bike Sharing 데이터를 사용하여 넓은 형식(wide format)에서 긴 형식(long format)으로 변환하시오. \n# casual과 registered 열을 하나의 열로 변환하고, 각 기록의 대여 유형과 대여 수를 포함하는 긴 형식 데이터프레임을 만드시오.\ndf['casual']\ndf7 = df.loc[:, ['datetime', 'season', 'casual', 'registered']]\n\ndf7\ndf8 = pd.melt(df7, \n        id_vars = ['datetime', 'season'],\n        var_name = 'user_type',\n        value_vars= ['casual', 'registered'],\n        value_name= 'user_count')\n\n#8\n#이전에 생성한 긴 형식 데이터프레임을 활용하여 \n# 각 계절(season)별로 casual과 registered 사용자의 평균 대여 수(count)를 구하시오.\n\ndf8.groupby(['season', 'user_type'])['user_count'].mean().reset_index()\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n              datetime  season  holiday  workingday  weather   temp   atemp  \\\n0  2011-09-05 17:00:00       3        1           0        2  27.06  29.545   \n1  2011-05-17 11:00:00       2        0           1        2  22.96  26.515   \n2  2011-11-10 09:00:00       4        0           1        2  17.22  21.210   \n3  2011-10-13 07:00:00       4        0           1        3  22.14  25.760   \n4  2011-10-15 14:00:00       4        0           0        1  24.60  31.060   \n\n   humidity  windspeed  casual  registered  count  \n0        89     7.0015      37          77    114  \n1        83    27.9993      26         104    130  \n2        94     7.0015      23         188    211  \n3       100     8.9981       5          76     81  \n4        33    31.0009     242         230    472  \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_32052\\4211086517.py:29: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n  dat = res4.loc[res4['count'].idxmax()][0]\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_32052\\4211086517.py:30: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n  coun = res4.loc[res4['count'].idxmax()][1]\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>season</th>\n      <th>user_type</th>\n      <th>user_count</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>casual</td>\n      <td>14.122642</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>registered</td>\n      <td>89.047170</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>casual</td>\n      <td>48.990196</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2</td>\n      <td>registered</td>\n      <td>169.813725</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>3</td>\n      <td>casual</td>\n      <td>55.127273</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>3</td>\n      <td>registered</td>\n      <td>210.372727</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>4</td>\n      <td>casual</td>\n      <td>29.709402</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>4</td>\n      <td>registered</td>\n      <td>188.871795</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#b10a997a .cell execution_count=2}\n``` {.python .cell-code}\nimport pandas as pd\n#9\npd.set_option('display.max_columns', None) # 전체 칼럼 정보 프린트 옵션\ndf = pd.read_csv('./data/logdata.csv')\nprint(df.head(2))\n\ndf8 = df['로그'].str.extractall(r'([0-9]+)').reset_index()\ndf8\ndf['숫자'] = df8.groupby('level_0')[0].apply(lambda x: ' '.join(x))\n\n\ndf\n#10\ndf['시간'] = df['로그'].str.extract(r'(\\s[0-9:]+)')\n\n#11\ndf['로그']\ndf['한글'] = df['로그'].str.extract(r'(\\s[가-힣]+)')\ndf['한글']\n\n#12 특수문자 제거\ndf['특수문자 제거'] = df['로그'].str.replace(r'[^a-zA-Z0-9가-힣\\s]', '', regex=True)\ndf['특수문자 제거']\n\n#로그 칼럼에서 유저, \n# Amount 값을 추출한 후 각 유저별 Amount의 평균값을 계산하시오.\n\ndf['user'] = df['로그'].str.extract(r'(\\s[가-힣]+)')\ndf10 = df['로그'].str.extract(r'(\\s[가-힣]+)').reset_index()\ndf['로그'].str.extract(r'Amount:\\s(\\d+)')\n#찾고 싶은거에만 괄호 치면 됨.\ndf10\n\ndf\ndf['로그'][27]\ndf9 = df['로그'].str.extract(r'(\\s\\d{4})').reset_index()\ndf9\ndf11 = pd.merge(df10, df9,\n                on= 'index', \n                how = 'left')\ndf11 = df11.dropna()\ndf11['0_y'] = pd.to_numeric(df11['0_y'], errors='coerce')\ndf12 = df11.groupby('0_x')['0_y'].mean().reset_index()\ndf12 = df12.rename(columns = {'0_x': 'user', '0_y':'amount'})\ndf12\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                                                  로그\n0  2024-07-18 12:34:56 User: 홍길동 Action: Login ID...\n1  2024-07-18 12:35:00 User: 김철수 Action: Purchase...\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>user</th>\n      <th>amount</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>김철수</td>\n      <td>3666.666667</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>박지성</td>\n      <td>5750.000000</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>이영희</td>\n      <td>4250.000000</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>장보고</td>\n      <td>5750.000000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>최강타</td>\n      <td>3750.000000</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>홍길동</td>\n      <td>4250.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}