{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "2e63ac28",
   "metadata": {},
   "source": [
    "---\n",
    "title: \"LS_school\"\n",
    "author: \"Kim Sun Jun\"\n",
    "date: \"2025-07-22\"\n",
    "jupyter: \n",
    "  kernel: ls_gen_5\n",
    "categories: [news, code, analysis]\n",
    "---\n",
    "\n",
    "\n",
    "복습용 블로그\n",
    "\n",
    "## 7월 22일 복습\n",
    "\n",
    "-날짜, 문자 다루기 연습"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f622d7e7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              datetime  season  holiday  workingday  weather   temp   atemp  \\\n",
      "0  2011-09-05 17:00:00       3        1           0        2  27.06  29.545   \n",
      "1  2011-05-17 11:00:00       2        0           1        2  22.96  26.515   \n",
      "2  2011-11-10 09:00:00       4        0           1        2  17.22  21.210   \n",
      "3  2011-10-13 07:00:00       4        0           1        3  22.14  25.760   \n",
      "4  2011-10-15 14:00:00       4        0           0        1  24.60  31.060   \n",
      "\n",
      "   humidity  windspeed  casual  registered  count  \n",
      "0        89     7.0015      37          77    114  \n",
      "1        83    27.9993      26         104    130  \n",
      "2        94     7.0015      23         188    211  \n",
      "3       100     8.9981       5          76     81  \n",
      "4        33    31.0009     242         230    472  \n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_32052\\4211086517.py:29: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  dat = res4.loc[res4['count'].idxmax()][0]\n",
      "C:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_32052\\4211086517.py:30: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  coun = res4.loc[res4['count'].idxmax()][1]\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>season</th>\n",
       "      <th>user_type</th>\n",
       "      <th>user_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>casual</td>\n",
       "      <td>14.122642</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>registered</td>\n",
       "      <td>89.047170</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>casual</td>\n",
       "      <td>48.990196</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2</td>\n",
       "      <td>registered</td>\n",
       "      <td>169.813725</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3</td>\n",
       "      <td>casual</td>\n",
       "      <td>55.127273</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>3</td>\n",
       "      <td>registered</td>\n",
       "      <td>210.372727</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>4</td>\n",
       "      <td>casual</td>\n",
       "      <td>29.709402</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>4</td>\n",
       "      <td>registered</td>\n",
       "      <td>188.871795</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   season   user_type  user_count\n",
       "0       1      casual   14.122642\n",
       "1       1  registered   89.047170\n",
       "2       2      casual   48.990196\n",
       "3       2  registered  169.813725\n",
       "4       3      casual   55.127273\n",
       "5       3  registered  210.372727\n",
       "6       4      casual   29.709402\n",
       "7       4  registered  188.871795"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "df = pd.read_csv('./data/bike_data.csv')\n",
    "print(df.head())\n",
    "df['datetime'] =pd.to_datetime(df['datetime'])\n",
    "\n",
    "#1번\n",
    "df['hour'] = df['datetime'].dt.hour\n",
    "\n",
    "df['hour']\n",
    "df['date'] = df['datetime'].dt.date\n",
    "our = df.loc[df['season'] == 1]\n",
    "\n",
    "our.groupby('hour')['count'].mean().reset_index()\n",
    "\n",
    "#2\n",
    "df.groupby('season')['count'].mean().reset_index()\n",
    "\n",
    "\n",
    "#3\n",
    "df['month'] = df['datetime'].dt.month\n",
    "\n",
    "df.groupby('month')['count'].sum().reset_index()\n",
    "\n",
    "\n",
    "#4\n",
    "df['date'] = df['datetime'].dt.date\n",
    "res4 = df.groupby('date')['count'].sum().reset_index()\n",
    "dat = res4.loc[res4['count'].idxmax()][0]\n",
    "coun = res4.loc[res4['count'].idxmax()][1]\n",
    "f'날짜는 {dat}, 카운트는 {coun}'\n",
    "\n",
    "#5\n",
    "df.groupby('hour')['count'].mean().reset_index()\n",
    "\n",
    "#6 특정 요일(weekday) 동안의 총 대여량(count)을 구하시오.\n",
    "df\n",
    "df['week'] = df['datetime'].dt.day_name()\n",
    "dfs = df.groupby('week')['count'].sum().reset_index()\n",
    "f'{dfs.iloc[1,0]}의 총 대여량은 {dfs.iloc[1,1]} 입니다'\n",
    "\n",
    "#7\n",
    "#주어진 Bike Sharing 데이터를 사용하여 넓은 형식(wide format)에서 긴 형식(long format)으로 변환하시오. \n",
    "# casual과 registered 열을 하나의 열로 변환하고, 각 기록의 대여 유형과 대여 수를 포함하는 긴 형식 데이터프레임을 만드시오.\n",
    "df['casual']\n",
    "df7 = df.loc[:, ['datetime', 'season', 'casual', 'registered']]\n",
    "\n",
    "df7\n",
    "df8 = pd.melt(df7, \n",
    "        id_vars = ['datetime', 'season'],\n",
    "        var_name = 'user_type',\n",
    "        value_vars= ['casual', 'registered'],\n",
    "        value_name= 'user_count')\n",
    "\n",
    "#8\n",
    "#이전에 생성한 긴 형식 데이터프레임을 활용하여 \n",
    "# 각 계절(season)별로 casual과 registered 사용자의 평균 대여 수(count)를 구하시오.\n",
    "\n",
    "df8.groupby(['season', 'user_type'])['user_count'].mean().reset_index()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b10a997a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                                  로그\n",
      "0  2024-07-18 12:34:56 User: 홍길동 Action: Login ID...\n",
      "1  2024-07-18 12:35:00 User: 김철수 Action: Purchase...\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user</th>\n",
       "      <th>amount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>김철수</td>\n",
       "      <td>3666.666667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>박지성</td>\n",
       "      <td>5750.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>이영희</td>\n",
       "      <td>4250.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>장보고</td>\n",
       "      <td>5750.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>최강타</td>\n",
       "      <td>3750.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>홍길동</td>\n",
       "      <td>4250.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   user       amount\n",
       "0   김철수  3666.666667\n",
       "1   박지성  5750.000000\n",
       "2   이영희  4250.000000\n",
       "3   장보고  5750.000000\n",
       "4   최강타  3750.000000\n",
       "5   홍길동  4250.000000"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "#9\n",
    "pd.set_option('display.max_columns', None) # 전체 칼럼 정보 프린트 옵션\n",
    "df = pd.read_csv('./data/logdata.csv')\n",
    "print(df.head(2))\n",
    "\n",
    "df8 = df['로그'].str.extractall(r'([0-9]+)').reset_index()\n",
    "df8\n",
    "df['숫자'] = df8.groupby('level_0')[0].apply(lambda x: ' '.join(x))\n",
    "\n",
    "\n",
    "df\n",
    "#10\n",
    "df['시간'] = df['로그'].str.extract(r'(\\s[0-9:]+)')\n",
    "\n",
    "#11\n",
    "df['로그']\n",
    "df['한글'] = df['로그'].str.extract(r'(\\s[가-힣]+)')\n",
    "df['한글']\n",
    "\n",
    "#12 특수문자 제거\n",
    "df['특수문자 제거'] = df['로그'].str.replace(r'[^a-zA-Z0-9가-힣\\s]', '', regex=True)\n",
    "df['특수문자 제거']\n",
    "\n",
    "#로그 칼럼에서 유저, \n",
    "# Amount 값을 추출한 후 각 유저별 Amount의 평균값을 계산하시오.\n",
    "\n",
    "df['user'] = df['로그'].str.extract(r'(\\s[가-힣]+)')\n",
    "df10 = df['로그'].str.extract(r'(\\s[가-힣]+)').reset_index()\n",
    "df['로그'].str.extract(r'Amount:\\s(\\d+)')\n",
    "#찾고 싶은거에만 괄호 치면 됨.\n",
    "df10\n",
    "\n",
    "df\n",
    "df['로그'][27]\n",
    "df9 = df['로그'].str.extract(r'(\\s\\d{4})').reset_index()\n",
    "df9\n",
    "df11 = pd.merge(df10, df9,\n",
    "                on= 'index', \n",
    "                how = 'left')\n",
    "df11 = df11.dropna()\n",
    "df11['0_y'] = pd.to_numeric(df11['0_y'], errors='coerce')\n",
    "df12 = df11.groupby('0_x')['0_y'].mean().reset_index()\n",
    "df12 = df12.rename(columns = {'0_x': 'user', '0_y':'amount'})\n",
    "df12"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "ls_gen_5",
   "language": "python",
   "name": "ls_gen_5",
   "path": "C:\\Users\\USER\\AppData\\Roaming\\jupyter\\kernels\\ls_gen_5"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
